1.
	-> Objetivo do curso:
		Apresentar os fundamentos e aplicações da propriedade flexbox na criação
		de layouts responsivos, sem a necessidade de definição de valores fixos.
	-> Construir páginas que vão se adpatar as mais diversas resoluções.
	-> Assertividade dos layouts é maior.
	-> O Flex Box foi projetado como um modelo de layout unidimensional e como um método que pode oferecer
	   distribuição de espaço entre itens em uma interface e recursos de alinhamento.
	-> Flex Container: é a tag que envolve os itens, será nela que iremos aplicar a propriedade "display: flex".
			   Transforma todos os seus itens filhos em flex itens.
		-> Pode ser feita em qualquer tipo de tag.
		-> Propriedades relacionadas:
			• Display: inicializador do container.
			• flex-direction: fazer o direcionamento dos itens.
			• flex-wrap: vai se aplicar para quebra de linha.
			• flex-flow: abreviação para o direction e o wrap.
			• justify-content: alinhar os itens do container de acordo com a sua direção. 
			• align-items: alinhar os itens de acordo com o seu eixo do container.
			• align-content: alinhar as linhas desse container.
	-> Flex Item: são os elementos filhos diretos do Flex Container. E também podem se tornar Flex Container.
		-> Propriedades relacionadas:
			• flex-grow: definir o fator de crescimento.
			• flex-basis: definir o tamanho inicial do item antes da distribuição do espaço restante dentro do container.
			• flex-shrink: define a capacidade de redução.
			• flex: abreviação das três acima.
			• oder: ordem de distribuição e listagem desses itens.
			• align-self: define o alinhamento de um item específico desse container.

2.
	-> Display: flex;
		Torna a tag um elemento do tipo flex container, e assim  automaticamente todos os seus filhos diretos desta tag, tornam-se em flex items.
	-> Flex-direction
		É a propriedade que estabelece o eixo principal do container, definindo assim a direção que
		os flex items são colocados no flex container.
		-> Eixos:
			• row (padrão): à direção do texto, esquerda para direita.
			• row-reverse: sentido oposto à direção do texto.
			• column: ordenação de cima para baixo, em coluna única.
			• column-reverse: ordenação inversa, de baixo para cima.
	-> Flex-wrap
		É a propriedade que define se os itens devem ou não quebrar linha.
		Por padrão les não quebram linhas, isso faz com que os flex itens sejam compactados slém do limite do conteúdo.
			• nowrap: é o padrão, não permite a quebra de linha.
			• wrap: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado.
			• wrap-reverse: permite a quebra de linha assim que um dos flex itens não puder mais ser compactado,
							porém na direção contrária da linha, acima.
	-> Flex-flow
		É um atalho para as propriedades flex-direction e flex-wrap.
		Porém seu uso não é tão comum, visto que, quando mudamos o flex-direction para column, mantemos o padrão do flex-wrap que é nowrap.
	-> Justify Content
		Essa propriedade vai se encarregar de alinhar os itens dentro do container de acordo com a direção
		pretendida e tratar da distribuição de espaçamento entre eles.
		-> Variações:
			• flex-start: início do container.
			• flex-end: final do container.
			• center: ao centro do container.
			• space-between: cria um espaçamento igual entre os elementos.
			• space-around: os espaçamentos do meio são duas vezes maiores que o inicial e final.
	-> Align-items
		Trata do alinhamento dos flex itens de acordo com o eixo do container.
		O alinhamento é diferente para quando os itens são colunas ou linhas.
		Permite o alinhamento central no eixo vertical.
		-> Tipos de alinhamento:
			• center: alinhamento dos itens ao centro.
			• stretch: padrão, e os flex itens crescem igualmente. 
			• flex-start: alinhamento dos itens ao início.
			• flex-end: alinhamento dos itens no final.
			• baseline: alinhamento de acordo com a linha base da tipografia dos itens.
	-> Align-content
		É a propriedade responsável por tratar o lainhamento das linhas do container em relação ao eixo vertical do container.
		Precisamos que:
			• O container utilize quebra de linhas.
			• A altura do container seja maior que a soma das linhas dos itens.
		-> Tipos de alinhamento:
			• center: alinhamento dos itens ao centro.
			• stretch: é o padrão e os flex itens crescem igualmente.
			• flex-start: alinhamento dos itens ao início.
			• flex-end: alinhamento dos itens no final.
			• space-between: cria um espaçamento igual entre os elementos.
			• space-around: os espaçamentos do meio são suas vezes maiores que o inicial e final.

3.
	-> Flex-grow
		Define a proporcionalidade de crescimento dos itens, respeitando o tamanho de seus conteúdos internos.
		OBS: não irá funcionar em caso tenhamos adicionado justify-content ao nosso flex container.
	-> Flex-basis
		É a propriedade que estabelece o tamanho inicial do item antes da distribuição de espaço restante dentro dele,
		usando como base o conteúdo interno disposto.
		-> Valores possíveis:
			• auto: caso o item não tenha tamanho, este será proporcional ao conteúdo do item.
			• px, %, em, ...: são valores exatos previamente definidos.
			• 0 (zero): terá relação com a definição do flex-grow.
	-> Flex-shrink
		É a propriedade que estabelece a capacidade de redução ou compressão do tamanho de um item.
	-> Flex
		Esta propriedade é um atalho ou abreviação de escrita para as propriedades: grow, shrink e basis.
	-> Order
	-> Align-self
		É a propriedade que estabelece o alinhamento de modo individual sobre um determinado item.
		-> Valores possíveis:
			• auto: valor padrão, irá respeitar a definição de align-items do container. 
			• flex-start: ao início do container.
			• flex-end: ao final do container.
			• center: relativo ao centro de acordo com o eixo.
			• stretch: ocupa todo o espaço relativo.
			• baseline: utiliza a linha base da tipografia.